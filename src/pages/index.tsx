import { type NextPage } from 'next'
import Head from 'next/head'
import { useEffect, useState } from 'react'
// import math from 'mathjs'
import { motion } from 'framer-motion'
import { useKey } from 'react-use'

const randInt = (min: number, max: number) => {
  return Math.floor(Math.random() * (max - min + 1)) + min
}

const Home: NextPage = () => {
  const [target, setTarget] = useState<number>(0)
  const [numbers, setNumbers] = useState<(number | null)[]>([])
  const [selNum, setSelNum] = useState<number>(-1)
  const [selOp, setSelOp] = useState<string>('')

  useKey('q', () => updateNum(0))
  useKey('w', () => updateNum(1))
  useKey('e', () => updateNum(2))
  useKey('a', () => updateNum(3))
  useKey('s', () => updateNum(4))
  useKey('d', () => updateNum(5))

  useKey('ArrowUp', () => setSelOp('+'))
  useKey('ArrowLeft', () => setSelOp('-'))
  useKey('ArrowRight', () => setSelOp('*'))
  useKey('ArrowDown', () => setSelOp('/'))

  const updateNum = (i: number) => {
    console.log(numbers, i, selOp)
    if (numbers[i] == null) return
    if (selOp) {
      const nums = [...numbers]
      nums[i] = eval(
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        `${nums[selNum]}${selOp}${nums[i]}`
      ) as number
      nums[selNum] = null
      setNumbers(nums)
      setSelOp('')
    }
    setSelNum(i)
  }
  useEffect(() => {
    console.log(numbers)
  }, [numbers])

  useEffect(() => {
    const nums = []
    for (let i = 0; i < 6; i++) {
      nums.push(randInt(1, 25))
    }

    const t = randInt(100, 500)
    setNumbers(nums)
    setTarget(t)
  }, [])

  return (
    <>
      <Head>
        <title>Digits</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center space-y-8 bg-slate-950">
        <h1>{target}</h1>
        <div className="grid grid-cols-3 gap-5">
          {numbers.map((n, i) => (
            <div
              key={i}
              className={`relative flex h-24 w-24 ${
                n == null ? 'invisible' : ''
              }`}
            >
              {selNum === i && (
                <motion.div
                  className="absolute z-10 h-full w-full rounded-full bg-green-500 shadow-[0_0_25px_5px_rgba(0,0,0,0.1)] shadow-green-800"
                  layoutId="selNum"
                />
              )}
              <motion.button
                layout
                onClick={() => updateNum(i)}
                whileHover={{ scale: 0.9, rotate: randInt(-10, 10) }}
                whileTap={{ scale: 0.8, rotate: randInt(-20, 20) }}
                className={`z-20 flex h-full w-full items-center justify-center rounded-full border-4 border-dotted p-6 text-3xl font-bold text-white ${
                  selNum === i ? 'border-transparent' : ''
                }`}
              >
                {n}
              </motion.button>
            </div>
          ))}
        </div>
        <div>
          <div className="flex w-60 flex-row items-center justify-center">
            <Operation text="+" event="+" selOp={selOp} setSelOp={setSelOp} />
          </div>

          <div className="flex w-60 flex-row items-center justify-between">
            <Operation text="-" event="-" selOp={selOp} setSelOp={setSelOp} />
            <Operation text="ร" event="*" selOp={selOp} setSelOp={setSelOp} />
          </div>
          <div className="flex w-60 flex-row items-center justify-center">
            <Operation text="รท" event="/" selOp={selOp} setSelOp={setSelOp} />
          </div>
        </div>
      </main>
    </>
  )
}

const Operation = ({
  text,
  event: arrow,
  selOp,
  setSelOp,
}: {
  text: string
  event: string
  selOp: string
  setSelOp: (selOp: string) => void
}) => (
  <div className="relative flex h-20 w-20">
    {selOp === arrow && (
      <motion.div
        className="absolute z-10 h-full w-full rounded-full bg-blue-500 shadow-[0_0_25px_5px_rgba(0,0,0,0.1)] shadow-blue-800"
        layoutId="selOp"
      />
    )}
    <motion.button
      layout
      onClick={() => setSelOp(arrow)}
      whileHover={{ scale: 0.9, rotate: randInt(-10, 10) }}
      whileTap={{ scale: 0.8, rotate: randInt(-20, 20) }}
      className={`z-20 flex h-full w-full items-center justify-center rounded-full border-4 border-dotted p-6 text-3xl font-bold text-white duration-300 ${
        selOp === arrow ? 'border-transparent' : ''
      }`}
    >
      {text}
    </motion.button>
  </div>
)

export default Home
